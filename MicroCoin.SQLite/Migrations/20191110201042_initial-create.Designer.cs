// <auto-generated />
using System;
using MicroCoin.SQLite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MicroCoin.SQLite.Migrations
{
    [DbContext(typeof(MicroCoinDBContext))]
    [Migration("20191110201042_initial-create")]
    partial class initialcreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0-preview2.19525.5");

            modelBuilder.Entity("MicroCoin.Chain.Account", b =>
                {
                    b.Property<uint>("AccountNumber")
                        .HasColumnType("integer");

                    b.Property<uint?>("AccountInfoAccountNumber")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("AccountType")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("Balance")
                        .HasColumnType("integer");

                    b.Property<uint>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Name")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<uint>("TransactionCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("UpdatedBlock")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("UpdatedByBlock")
                        .HasColumnType("INTEGER");

                    b.HasKey("AccountNumber");

                    b.HasIndex("AccountInfoAccountNumber");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("MicroCoin.Chain.AccountInfo", b =>
                {
                    b.Property<uint>("AccountNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("AccountKeyId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("AccountToPayPrice")
                        .HasColumnType("integer");

                    b.Property<uint>("LockedUntilBlock")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NewPublicKeyId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("AccountNumber");

                    b.HasIndex("AccountKeyId");

                    b.HasIndex("NewPublicKeyId");

                    b.ToTable("AccountInfos");
                });

            modelBuilder.Entity("MicroCoin.Cryptography.ECKeyPair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("CurveType")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("X")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("Y")
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("ECKeyPair");
                });

            modelBuilder.Entity("MicroCoin.Chain.Account", b =>
                {
                    b.HasOne("MicroCoin.Chain.AccountInfo", "AccountInfo")
                        .WithMany()
                        .HasForeignKey("AccountInfoAccountNumber");
                });

            modelBuilder.Entity("MicroCoin.Chain.AccountInfo", b =>
                {
                    b.HasOne("MicroCoin.Cryptography.ECKeyPair", "AccountKey")
                        .WithMany()
                        .HasForeignKey("AccountKeyId");

                    b.HasOne("MicroCoin.Cryptography.ECKeyPair", "NewPublicKey")
                        .WithMany()
                        .HasForeignKey("NewPublicKeyId");
                });
#pragma warning restore 612, 618
        }
    }
}
